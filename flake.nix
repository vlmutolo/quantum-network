# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.22)
{
  # A helpful description of your flake
  description = "Simulate quantum networks with entanglement swapping.";

  # Flake inputs
  inputs = {
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*";

    rust-overlay = {
      url = "https://flakehub.com/f/oxalica/rust-overlay/*";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  # Flake outputs that other flakes can use
  outputs = { self, flake-schemas, nixpkgs, rust-overlay }:
    let
      # Nixpkgs overlays
      overlays = [
        rust-overlay.overlays.default
        (final: prev: {
          rustToolchain = final.rust-bin.stable.latest.default.override { extensions = [ "rust-src" ]; };
        })
      ];

      # Helpers for producing system-specific outputs
      supportedSystems = [ "x86_64-linux" "aarch64-darwin" "x86_64-darwin" "aarch64-linux" ];
      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f {
        pkgs = import nixpkgs { inherit overlays system; };
      });
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      # Packages
      packages = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.rustPlatform.buildRustPackage {
          pname = "quantum-network-simulator";
          version = "0.1.0";

          src = ./.;
          cargoLock.lockFile = ./Cargo.lock;

          # Build in release mode
          buildType = "release";
        };
      });


      # Test commands
      checks = forEachSupportedSystem ({ pkgs }: {
        # Rust tests
        rust-tests = pkgs.rustPlatform.buildRustPackage {
          pname = "quantum-network-simulator-tests";
          version = "0.1.0";

          src = ./.;
          cargoLock.lockFile = ./Cargo.lock;

          # Only build the tests
          buildPhase = "cargo test --no-run";

          # Run the tests
          checkPhase = "cargo test";

          # Ensure that the check phase runs
          doCheck = true;
        };

        # Rust formatting check
        rust-fmt-check = pkgs.runCommand "rust-fmt-check"
          {
            buildInputs = [ pkgs.rustToolchain ];
          } ''
          cd ${./.}
          if ! ${pkgs.rustToolchain}/bin/cargo fmt --check; then
            printf "Error: Rust files are not properly formatted.\n" >&2
            printf "Please run 'cargo fmt' to format your code.\n" >&2
            exit 1
          fi

          touch $out
        '';

        # Nix formatting check
        nix-fmt-check = pkgs.runCommand "nix-fmt-check"
          {
            buildInputs = [ pkgs.nixpkgs-fmt ];
          } ''
          if ! nixpkgs-fmt --check ${./.}; then
            printf "Error: Nix files are not properly formatted.\n" >&2
            printf "Please run 'nix fmt' to format your code.\n" >&2
            exit 1
          fi

          # If the command above passes (exits with 0), create a dummy output file
          touch $out
        '';
      });


      # Development environments
      devShells = forEachSupportedSystem ({ pkgs }: {
        default = pkgs.mkShell {
          # Pinned packages available in the environment
          packages = with pkgs; [
            rustToolchain
            rust-analyzer
            git
            nixpkgs-fmt

            # Add a custom 'fmt' command to format both Nix and Rust code
            (pkgs.writeShellScriptBin "format" ''
              echo "Formatting Nix files..."
              ${pkgs.nixpkgs-fmt}/bin/nixpkgs-fmt .

              echo "Formatting Rust files..."
              ${pkgs.rustToolchain}/bin/cargo fmt

              echo "All formatting complete!"
            '')
          ];


          # Environment variables
          env = {
            RUST_SRC_PATH = "${pkgs.rustToolchain}/lib/rustlib/src/rust/library";
          };

          # A hook run every time you enter the environment
          shellHook = ''
            printf "Entering project environment.\n"
          '';
        };
      });
    };
}
